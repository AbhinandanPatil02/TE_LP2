public class BFS_Pra {
    
    Map<Integer,List<Integer>> adjlist=new Map<Integer,List<Integer>>();
    
    public void addedge(Integer u, Integer v){
        if(!adjlist.containsKey(u)){
            adjlist.put(u,new List<Integer>());
        }
        if(!adjlist.containsKey(v)){
            adjlist.put(v,new List<Integer>());
        }
        adjlist.get(u).add(v);
        adjlist.get(v).add(u);
    }
    
    public List<Integer>BFS(Integer src,Integer n){
        List<Integer>ans=new List<Integer>();
        List<Boolean>vis=new List<Boolean>();
        List<Integer>queue=new List<Integer>();
        for(Integer i=0;i<n;i++){
            vis.add(False);
        }
        queue.add(src);
        vis.set(src,True);
        while(!queue.isEmpty()){
            Integer node=queue.remove(0);
            ans.add(node);
            if(adjlist.containsKey(node)){
                for(Integer nbr:adjlist.get(node)){
                    if(!vis.get(nbr)){
                        vis.set(nbr,True);
                        queue.add(nbr);
                    }
                }
            }
        }
        return ans;
    }
    
    
    
    
    
    public Static void run(){
        BFS_Pra g=new BFS_Pra();
        Integer n=4;
        g.addedge(0,1);
        g.addedge(1,2);
        g.addedge(1,3);
        g.addedge(2,3); 
        System.debug(g.BFS(0,n));
    }
    
}